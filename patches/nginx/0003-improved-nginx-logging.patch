From 9b31217be23a163a71362ae7b0c04220807fdc16 Mon Sep 17 00:00:00 2001
From: sftcd <stephen.farrell@cs.tcd.ie>
Date: Wed, 26 Feb 2025 15:12:20 +0000
Subject: [PATCH 3/3] improved nginx logging

---
 src/event/ngx_event_openssl.c              | 43 +++++----------
 src/http/modules/ngx_http_log_module.c     | 63 ++++++++++++++++++++++
 src/stream/ngx_stream_ssl_preread_module.c |  4 ++
 src/stream/ngx_stream_ssl_preread_module.h |  2 -
 4 files changed, 79 insertions(+), 33 deletions(-)

diff --git a/src/event/ngx_event_openssl.c b/src/event/ngx_event_openssl.c
index 03a97aef0..7d29c248a 100644
--- a/src/event/ngx_event_openssl.c
+++ b/src/event/ngx_event_openssl.c
@@ -1048,36 +1048,6 @@ ngx_ssl_info_callback(const ngx_ssl_conn_t *ssl_conn, int where, int ret)
     }
 #endif
 
-#ifndef OPENSSL_NO_ECH
-    if ((where & SSL_CB_HANDSHAKE_DONE) == SSL_CB_HANDSHAKE_DONE) {
-        c = ngx_ssl_get_connection((ngx_ssl_conn_t *) ssl_conn);
-
-        char *inner_sni = NULL;
-        char *outer_sni = NULL;
-        int echrv = SSL_ech_get1_status(c->ssl->connection, &inner_sni,
-                                        &outer_sni);
-        switch (echrv) {
-        case SSL_ECH_STATUS_NOT_TRIED:
-            ngx_ssl_error(NGX_LOG_INFO, c->log, 0, "ECH not attempted");
-            break;
-        case SSL_ECH_STATUS_FAILED:
-            ngx_ssl_error(NGX_LOG_ERR, c->log, 0, "ECH tried but failed");
-            break;
-        case SSL_ECH_STATUS_BAD_NAME:
-            ngx_ssl_error(NGX_LOG_ERR, c->log, 0, "ECH worked but bad name");
-            break;
-        case SSL_ECH_STATUS_SUCCESS:
-            ngx_ssl_error(NGX_LOG_NOTICE, c->log, 0,
-                    "ECH success outer_sni: %s inner_sni: %s",
-                    (outer_sni?outer_sni:"NONE"),(inner_sni?inner_sni:"NONE"));
-            break;
-        default:
-            ngx_ssl_error(NGX_LOG_ERR, c->log, 0, "Error getting ECH status");
-            break;
-        }
-    }
-#endif
-
     if ((where & SSL_CB_ACCEPT_LOOP) == SSL_CB_ACCEPT_LOOP) {
         c = ngx_ssl_get_connection((ngx_ssl_conn_t *) ssl_conn);
 
@@ -5126,10 +5096,18 @@ ngx_ssl_get_ech_status(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
     case SSL_ECH_STATUS_SUCCESS:
         snprintf(buf, PATH_MAX, "success");
         break;
+    case SSL_ECH_STATUS_GREASE:
+        snprintf(buf, PATH_MAX, "GREASEd ECH");
+        break;
+    case SSL_ECH_STATUS_BACKEND:
+        snprintf(buf, PATH_MAX, "Backend/inner ECH");
+        break;
     default:
         snprintf(buf, PATH_MAX, "error getting ECH status");
         break;
     }
+    OPENSSL_free(inner_sni);
+    OPENSSL_free(outer_sni);
     s->len = ngx_strlen(buf);
     s->data = ngx_pnalloc(pool, s->len);
     ngx_memcpy(s->data,buf,s->len);
@@ -5151,6 +5129,8 @@ ngx_ssl_get_ech_inner_sni(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
         s->data = ngx_pnalloc(pool, s->len);
         ngx_memcpy(s->data,"NONE",s->len);
     }
+    OPENSSL_free(inner_sni);
+    OPENSSL_free(outer_sni);
     return NGX_OK;
 }
 
@@ -5169,7 +5149,8 @@ ngx_ssl_get_ech_outer_sni(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
         s->data = ngx_pnalloc(pool, s->len);
         ngx_memcpy(s->data,"NONE",s->len);
     }
-
+    OPENSSL_free(inner_sni);
+    OPENSSL_free(outer_sni);
     return NGX_OK;
 }
 
diff --git a/src/http/modules/ngx_http_log_module.c b/src/http/modules/ngx_http_log_module.c
index f7c4bd2f5..b91348a47 100644
--- a/src/http/modules/ngx_http_log_module.c
+++ b/src/http/modules/ngx_http_log_module.c
@@ -129,6 +129,10 @@ static u_char *ngx_http_log_body_bytes_sent(ngx_http_request_t *r,
     u_char *buf, ngx_http_log_op_t *op);
 static u_char *ngx_http_log_request_length(ngx_http_request_t *r, u_char *buf,
     ngx_http_log_op_t *op);
+#ifndef OPENSSL_NO_ECH
+static u_char *ngx_http_log_ech_status(ngx_http_request_t *r, u_char *buf,
+    ngx_http_log_op_t *op);
+#endif
 
 static ngx_int_t ngx_http_log_variable_compile(ngx_conf_t *cf,
     ngx_http_log_op_t *op, ngx_str_t *value, ngx_uint_t escape);
@@ -230,6 +234,10 @@ static ngx_str_t  ngx_http_combined_fmt =
                "\"$http_referer\" \"$http_user_agent\"");
 
 
+#ifndef OPENSSL_NO_ECH
+#define NGX_ECH_STATUS_LEN 140
+#endif
+
 static ngx_http_log_var_t  ngx_http_log_vars[] = {
     { ngx_string("pipe"), 1, ngx_http_log_pipe },
     { ngx_string("time_local"), sizeof("28/Sep/1970:12:00:00 +0600") - 1,
@@ -245,6 +253,10 @@ static ngx_http_log_var_t  ngx_http_log_vars[] = {
                           ngx_http_log_body_bytes_sent },
     { ngx_string("request_length"), NGX_SIZE_T_LEN,
                           ngx_http_log_request_length },
+#ifndef OPENSSL_NO_ECH
+    { ngx_string("ech_status"), NGX_ECH_STATUS_LEN,
+                          ngx_http_log_ech_status },
+#endif
 
     { ngx_null_string, 0, NULL }
 };
@@ -911,6 +923,57 @@ ngx_http_log_request_length(ngx_http_request_t *r, u_char *buf,
     return ngx_sprintf(buf, "%O", r->request_length);
 }
 
+#ifndef OPENSSL_NO_ECH
+static u_char *
+ngx_http_log_ech_status(ngx_http_request_t *r, u_char *buf,
+    ngx_http_log_op_t *op)
+{
+    char *sni_ech = NULL, *sni_clr = NULL, *hostheader = NULL;
+    const char *str;
+    SSL *ssl = NULL;
+    u_char *sprv = NULL;
+    int echstat = SSL_ECH_STATUS_NOT_TRIED;
+
+    /*
+     * this is a bit oddly structured but is based on what was done for
+     * lighttpd (by the upstream maintainer) and what we did for haproxy
+     */
+    if (!r || !r->connection || !r->connection->ssl
+        || !r->connection->ssl->connection)
+        return ngx_sprintf(buf, "ECH: no TLS connection");
+    ssl = r->connection->ssl->connection;
+    if (r->headers_in.server.len > 0) 
+        hostheader = (char *)r->headers_in.server.data;
+#define s(x) #x
+    switch ((echstat = SSL_ech_get1_status(ssl, &sni_ech, &sni_clr))) {
+      case SSL_ECH_STATUS_SUCCESS:   str = s(SSL_ECH_STATUS_SUCCESS);   break;
+      case SSL_ECH_STATUS_NOT_TRIED: str = s(SSL_ECH_STATUS_NOT_TRIED); break;
+      case SSL_ECH_STATUS_FAILED:    str = s(SSL_ECH_STATUS_FAILED);    break;
+      case SSL_ECH_STATUS_BAD_NAME:  str = s(SSL_ECH_STATUS_BAD_NAME);  break;
+      case SSL_ECH_STATUS_BAD_CALL:  str = s(SSL_ECH_STATUS_BAD_CALL);  break;
+      case SSL_ECH_STATUS_GREASE:    str = s(SSL_ECH_STATUS_GREASE);    break;
+      case SSL_ECH_STATUS_BACKEND:   str = s(SSL_ECH_STATUS_BACKEND);   break;
+      default:                       str = "ECH status unknown";        break;
+    }
+#undef s
+    /* we'll print ECH status, either the outer SNI or
+     * the host header (if outer SNI is NULL) and the
+     * inner SNI if non-NULL */
+    if (echstat != SSL_ECH_STATUS_SUCCESS) {
+        OPENSSL_free(sni_clr);
+        sni_clr = SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name);
+    }
+    if (sni_clr != NULL)
+        hostheader = sni_clr;
+    sprv = ngx_sprintf(buf, "ECH: %s/%s/%s", str,
+                       (hostheader == NULL ? "" : hostheader),
+                       (sni_ech == NULL ? "" : sni_ech));
+    OPENSSL_free(sni_ech);
+    if (echstat == SSL_ECH_STATUS_SUCCESS)
+        OPENSSL_free(sni_clr);
+    return sprv;
+}
+#endif
 
 static ngx_int_t
 ngx_http_log_variable_compile(ngx_conf_t *cf, ngx_http_log_op_t *op,
diff --git a/src/stream/ngx_stream_ssl_preread_module.c b/src/stream/ngx_stream_ssl_preread_module.c
index 7bfad73d2..b9842a438 100644
--- a/src/stream/ngx_stream_ssl_preread_module.c
+++ b/src/stream/ngx_stream_ssl_preread_module.c
@@ -202,6 +202,8 @@ ngx_int_t ngx_stream_do_ech(
         if (rv != 1) {
             ngx_ssl_error(NGX_LOG_NOTICE, c->log, 0,
                 "do_ech: ECH decrypt failed (%d)", rv);
+            OPENSSL_free(inner_sni);
+            OPENSSL_free(outer_sni);
             return NGX_ERROR;
         }
         if (*dec_ok == 1) {
@@ -228,6 +230,8 @@ ngx_int_t ngx_stream_do_ech(
             ngx_ssl_error(NGX_LOG_NOTICE, c->log, 0,
                 "do_ech: ECH decrypt failed (%d)", rv);
         }
+        OPENSSL_free(inner_sni);
+        OPENSSL_free(outer_sni);
     } else {
         ngx_ssl_error(NGX_LOG_NOTICE, c->log, 0,
             "do_ech: not a CH or CCS, contentype: %z, h/s type: %z",
diff --git a/src/stream/ngx_stream_ssl_preread_module.h b/src/stream/ngx_stream_ssl_preread_module.h
index 6c07219ae..46b825904 100644
--- a/src/stream/ngx_stream_ssl_preread_module.h
+++ b/src/stream/ngx_stream_ssl_preread_module.h
@@ -2,7 +2,6 @@
 #ifndef _NGX_STREAM_SSL_PREREAD_MODULE_H_INCLUDED_
 #define _NGX_STREAM_SSL_PREREAD_MODULE_H_INCLUDED_
 
-#ifndef OPENSSL_NO_ECH
 typedef struct {
     ngx_flag_t      enabled;
 #ifndef OPENSSL_NO_ECH
@@ -43,4 +42,3 @@ ngx_int_t ngx_stream_do_ech(
     int                                *dec_ok);
 
 #endif
-#endif
-- 
2.48.1

